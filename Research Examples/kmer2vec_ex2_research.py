# -*- coding: utf-8 -*-
"""Kmer2Vec Ex2 Research.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JdxtFZlb5bkguRCxLaehXcuXHUXzPqnb
"""

# For this upload .fasta data from PC
# Merge all the data and name it as merged_sequences.fasta
# Data downloaded from NCBI website: https://www.ncbi.nlm.nih.gov/labs/virus/vssi/#/virus?SeqType_s=Nucleotide&VirusLineage_ss=Severe%20acute%20respiratory%20syndrome%20coronavirus%202,%20taxid:2697049&SourceDB_s=GenBank&Completeness_s=complete&CollectionDate_dr=2020-01-01T00:00:00.00Z%20TO%202025-03-02T23:59:59.00Z

!pip install biopython

import numpy as np
from gensim.models import Word2Vec
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from Bio import SeqIO

from google.colab import files
# Opens a file upload dialog
uploaded = files.upload()

import os

merged_filename = "merged_sequences.fasta"
# Append all the files
# Add a new line for separation
with open(merged_filename, "w") as outfile:
    for file_name in uploaded.keys():
        with open(file_name, "r") as infile:
            outfile.write(infile.read())
            outfile.write("\n")  # Add a newline for separation

print(f"All FASTA files have been merged into '{merged_filename}'")

# Check the fasta file
!head merged_sequences.fasta

# Extract subsequences from each DNA sequence
# Generate k-mers from DNA sequence
# Break down long sequence into smaller units
def generate_kmers(sequence, k=3):
    return [sequence[i:i+k] for i in range(len(sequence) - k + 1)]

# Load DNA sequences from FASTA file
# Read label if available in the FASTA file
def load_sequences(file_path):
    sequences, labels = [], []
    for record in SeqIO.parse(file_path, "fasta"):
        sequences.append(str(record.seq))
        labels.append(record.id)
    return sequences, labels

# Convert all DNA sequences into a list of k-mers
# Print a few k-mers to check the data
def process_sequences(sequences, k=3):
    return [generate_kmers(seq, k) for seq in sequences]
    print("Sample k-mers:", kmers_list[:5])
    return kmers_list

# Train a Word2Vec model on k-mers.
# We use gensim's Word2Vec model to learn vector representations of k-mers.
# And save the kmers_word2vec model for future use
def train_word2vec_model(kmers, vector_size=100, window=5, min_count=1):
    model = Word2Vec(sentences=kmers, vector_size=vector_size, window=window, min_count=min_count, sg=1)
    model.save("kmers_word2vec.model")
    return model

# Convert k-mers into numerical vectors using a trained Word2Vec model.
# First, map each sequenceâ€™s k-mers to their corresponding Word2Vec embeddings.
# Use the mean of k-mer vectors to represent a full sequence.
def get_kmer_vectors(kmers, model):
    vectors = []
    for seq_kmers in kmers:
        vector = np.mean([model.wv[kmer] for kmer in seq_kmers if kmer in model.wv], axis=0)
        vectors.append(vector)
    return np.array(vectors)

# Train and evaluate a Random Forest classifier using k-mer vectors.
# Trains a Random Forest model on the vectorized sequences.
# Splits data into training and testing sets.
# Reports classification accuracy.
def classify_sequences(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    clf = RandomForestClassifier(n_estimators=100, random_state=42)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.4f}")

# Kmer2Vec pipeline.
def main(file_path, k=3):
    print("Loading sequences...")
    sequences, labels = load_sequences(file_path)

    print("Processing sequences into k-mers...")
    kmers = process_sequences(sequences, k)

    print("Training Word2Vec model...")
    model = train_word2vec_model(kmers)

    print("Converting k-mers into vectors...")
    X = get_kmer_vectors(kmers, model)

    print("Classifying sequences...")
    classify_sequences(X, labels)

if __name__ == "__main__":
    file_path = "merged_sequences.fasta"
    main(file_path)