# -*- coding: utf-8 -*-
"""ENA Dataset Ex 2 Final Submission BD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eBP6TGvklLUAcM_Ej7Fuupu1wHdwCNy9
"""

# Covid-19 Genomic Dataset Example 2:
# ENA Database
# The ENA dataset provides up to 50,000 SARS-CoV-2 genome sequences in FASTA format
# helping analysis of viral nucleotides. It includes genetic data from various samples,
# useful for studying mutations, tracking viral evolution, and identifying variants.
# Key features include nucleotide sequences, sample metadata
# potential variant identification which are essential for understanding how the virus
# changes over time and spreads across regions.
# Since GIT LFS and AWS S3 free tiers have space storage constraints of 1GB and 5GB each
# We do not use those here in these examples we use it in the main capstone.

# Retrieve data from API's, webpages etc by using import requests
import requests

# ENA API URL for SARS-CoV-2 sequences
url = "https://www.ebi.ac.uk/ena/portal/api/search?result=sequence&query=tax_eq(2697049)&format=fasta&limit=50000"

# Download the data
# send a GET request to the URL to download data and then save the content of the response
# into a file named "ena_sars_cov2_sequences.fasta"
# the sequence data to be stored in the FASTA format.
response = requests.get(url)

# Save to a FASTA file
with open("ena_sars_cov2_sequences.fasta", "wb") as file:
    file.write(response.content)

print("Download complete: ena_sars_cov2_sequences.fasta")

# Biopython library for genomic data analysis
!pip install biopython matplotlib seaborn

# Import required libraries, os to interact with files and folders
import os

fasta_file = "ena_sars_cov2_sequences.fasta"

# Check if file exists
if os.path.exists(fasta_file):
    print(f"File found: {fasta_file}")

    # Check file size
    file_size = os.path.getsize(fasta_file)
    print(f"File size: {file_size} bytes")

    if file_size == 0:
        print("Error: The FASTA file is empty.")
    else:
        print("FASTA file is not empty.")
else:
    print("Error: FASTA file not found.")

# Print first 10 lines of the file
!head -n 10 ena_sars_cov2_sequences.fasta

# import the SeqIO module from the Biopython library
# used for reading and writing sequence data in various formats
# FASTA, GenBank, etc
# to handle biological sequence data in Python.
import matplotlib.pyplot as plt
from Bio import SeqIO

# Define the file path
fasta_file = "ena_sars_cov2_sequences.fasta"

# Read sequences and store lengths
# Read FASTA file
# Extract each sequence
# calculate the length of each sequence
# store the result in a list
sequence_lengths = [len(record.seq) for record in SeqIO.parse(fasta_file, "fasta")]

# Basic statistics
print(f"Total sequences: {len(sequence_lengths)}")
print(f"Minimum length: {min(sequence_lengths)}")
print(f"Maximum length: {max(sequence_lengths)}")
print(f"Average length: {sum(sequence_lengths) / len(sequence_lengths):.2f}")

# Plot histogram of sequence lengths
plt.hist(sequence_lengths, bins=50, color="skyblue", edgecolor="black")
plt.xlabel("Sequence Length")
plt.ylabel("Frequency")
plt.title("Distribution of Sequence Lengths")
plt.show()

from Bio import SeqIO

fasta_file = "ena_sars_cov2_sequences.fasta"

# Try reading and printing the first few records
# store the sequences in a list
# check the number of records that are present
# Print the details such as ID and length of the first five sequences.
records = list(SeqIO.parse(fasta_file, "fasta"))
print(f"Total records found: {len(records)}")
for i, record in enumerate(records[:5]):
    print(f"Sequence {i+1}: ID = {record.id}, Length = {len(record.seq)}")

# Print the first 20 lines of the FASTA file
!head -n 20 ena_sars_cov2_sequences.fasta