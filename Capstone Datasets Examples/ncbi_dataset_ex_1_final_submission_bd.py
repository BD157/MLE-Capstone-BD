# -*- coding: utf-8 -*-
"""NCBI Dataset Ex 1 Final Submission BD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qWweROVEjKDlqlAiXNiZvwTjaQqSwVcZ
"""

# Covid-19 Genomic Dataset Example 1:
# NCBI Virus SARS-CoV-2 Data Hub
# https://www.ncbi.nlm.nih.gov/labs/virus/vssi/#/virus?SeqType_s=Nucleotide&VirusLineage_ss=Severe%20acute%20respiratory%20syndrome%20coronavirus%202,%20taxid:2697049

# This data includes genomic sequences of SARS-CoV-2 samples, often associated with metadata such as
# collection dates, locations, variants, and other relevant information. This type of data
# is used for tracking viral mutations, analyzing spread patterns, and understanding how different strains behave over time.
# we downloaded SARS-CoV-2 genomic sequencing data in the fasta formats
# metadata in the CSV formats
# But since genomic datasets are extremely large we use a smaller dataset sample here for illustration purposes.
# We use API to retrieve data from the website

# The following Python code retrieves SARS-CoV-2 nucleotide sequences from the NCBI Entrez database
# using the NCBI E-utilities API and saves them in FASTA format.
# This dataset will be accessed via AWS Open Data for the main capstone.

# The first step is to use the requests library to make HTTP requests to NCBI's Entrez API to fetch SARS-CoV-2 sequences.
import requests

# NCBI Entrez API -- search endpoint -- helps find sequence IDs based on search criteria
# FETCH_URL -- retrieves the actual sequence data using those IDs.
SEARCH_URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi"
FETCH_URL = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi"

# Search for SARS-CoV-2 sequences (USA, 2020-2023)
# These parameters define the search in the NCBI Nucleotide database,
# specifying that we want up to 10 SARS-CoV-2 sequences from the USA
# collected between 2020 and 2023, with results returned in JSON format.

params = {
    'db': 'nucleotide',
    'term': 'SARS-CoV-2[organism] AND 2020:2024[dp] AND USA[geo]',
    'retmax': '1000',
    'retmode': 'json'
}
# Get sequence IDs
# It sends a request to NCBI to search for SARS-CoV-2 sequences based
# on the given criteria and retrieves a list of matching sequence IDs in JSON format.
# If no ID is found it returns an empty list
response = requests.get(SEARCH_URL, params=params)
ids = response.json().get("esearchresult", {}).get("idlist", [])

# Download and save sequences
# Download each sequence in FASTA format using its ID, save it as a .fasta file
# and print a message saying download was complete.
for seq_id in ids:
    seq_response = requests.get(FETCH_URL, params={'db': 'nucleotide', 'id': seq_id, 'retmode': 'fasta'})
    with open(f"sars_cov_2_{seq_id}.fasta", "w") as file:
        file.write(seq_response.text)
    #print(f"Downloaded: sars_cov_2_{seq_id}.fasta")

print("Download complete.")

# Import required libraries, os to interact with files and folders
import os
import pandas as pd
import matplotlib.pyplot as plt

# Read all FASTA files and extract sequences
# Create an empty list to store extracted information from each FASTA file.
data = []

# List files in the current directory
# Check if it's a FASTA file

# Join all lines, remove newlines
for file in os.listdir():   # get a list of all files in the directory
    if file.endswith(".fasta"):     # only process those files that end with .fasta format
        with open(file, "r") as f:   # open and read each fasta file
            lines = f.readlines()     # read all lines in the file
            header = lines[0].strip()    # First line is the header
            sequence = "".join(lines[1:]).replace("\n", "")     # join all remaining lines into a single string and removes any newline characters.
            data.append({"id": file.replace(".fasta", ""), "header": header, "sequence": sequence})
# store the sequence data (the genetic code) and some information about each file (like its name) in a list for later use.

# Convert to a Pandas DataFrame
df = pd.DataFrame(data)

# Get the dataset shape (number of rows and columns)
print("Dataset shape:", df.shape)

# Get the number of samples (number of rows in the dataset)
print("Number of samples:", len(df))

# Add sequence length column
# calculate and add the length of each sequence,
# which is a key feature for analyzing the sequences and understanding their characteristics.
df["length"] = df["sequence"].apply(len)

# Display the first few sequence IDs and their lengths
# Look at the data and see if there are any potential issues
print(df[["id", "length"]].head())  # Show first few rows with ID and length
print("\nSummary of Sequence Lengths:")
print(df["length"].describe())  # Summary statistics for sequence lengths

# Plot sequence length distribution
# we need to visualize the variation in sequence lengths, which can reveal patterns
# or issues that may need attention before further analysis
plt.hist(df["length"], bins=10, color="blue", edgecolor="black", alpha=0.7)
plt.xlabel("Sequence Length")
plt.ylabel("Frequency")
plt.title("Distribution of Sequence Lengths")
plt.show()

# Check for any duplicates in the dataset
duplicate_count = df.duplicated(subset=["sequence"]).sum()
print(f"Number of duplicate sequences: {duplicate_count}")

# Check for distinct sequence lengths in the dataset
unique_lengths = df["length"].nunique()
print(f"Number of unique sequence lengths: {unique_lengths}")

# Find the shortest and longest sequences
print(f"Shortest sequence length: {df['length'].min()}")
print(f"Longest sequence length: {df['length'].max()}")

# Nucleotide frequency analysis (A, T, G, C counts)
from collections import Counter

all_sequences = "".join(df["sequence"])
nucleotide_counts = Counter(all_sequences)
print("\nNucleotide Frequency:", nucleotide_counts)

# Visualize nucleotide distribution (Improved X-axis)
plt.figure(figsize=(6, 4))
plt.bar(nucleotide_counts.keys(), nucleotide_counts.values(), color=["blue", "green", "red", "yellow"])

# Improve readability
plt.xlabel("Nucleotide", fontsize=7)  # Make axis label bigger
plt.ylabel("Count", fontsize=14)
plt.title("Nucleotide Frequency Distribution", fontsize=16)
plt.xticks(fontsize=7)  # Make x-axis labels larger
plt.yticks(fontsize=7)

plt.show()

# Display column names
print("Columns in the dataset:", df.columns.tolist())

# Show first 5 rows
print("\nFirst 5 rows of the dataset:")
print(df.head())